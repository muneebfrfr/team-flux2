// This is your Prisma schema file,
// Learn more at https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id           String   @id @default(cuid()) @map("_id")
  name         String
  email        String   @unique
  phoneNumber  String?
  address      String?
  passwordHash String
  roles        String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  technicalDebtsOwned TechnicalDebt[] @relation("OwnerRelation")
  comments            Comment[]       @relation("CommentUser")
  GrowthSession       GrowthSession[]
}

model GrowthSession {
  id            String       @id @default(cuid()) @map("_id")
  topic         String
  presenterId   String
  scheduledTime DateTime
  notes         String?
  actionItems   ActionItem[]
  feedback      Feedback[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  presenter Users @relation(fields: [presenterId], references: [id])
}

type ActionItem {
  id          String       @default(cuid()) @map("_id")
  description String
  assignedTo  String
  status      ActionStatus
  dueDate     DateTime


}

type Feedback {
  userId    String
  rating    Int
  comments  String?
  createdAt DateTime
}

model Projects {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  color       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  technicalDebts TechnicalDebt[]
  deprecations   Deprecation[]
}

model TechnicalDebt {
  id          String    @id @default(cuid()) @map("_id")
  projectId   String
  title       String
  description String
  ownerId     String
  priority    Priority
  dueDate     DateTime?
  status      Status    @default(open)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project  Projects  @relation(fields: [projectId], references: [id])
  owner    Users     @relation("OwnerRelation", fields: [ownerId], references: [id])
  comments Comment[]
}

model Comment {
  id              String   @id @default(cuid()) @map("_id")
  technicalDebtId String
  userId          String
  message         String
  createdAt       DateTime @default(now())

  // Relations
  technicalDebt TechnicalDebt @relation(fields: [technicalDebtId], references: [id])
  user          Users         @relation("CommentUser", fields: [userId], references: [id])
}

model Deprecation {
  id                   String            @id @default(cuid()) @map("_id")
  projectId            String
  deprecatedItem       String
  suggestedReplacement String?
  migrationNotes       String?
  timelineStart        DateTime
  deadline             DateTime
  progressStatus       DeprecationStatus @default(NOT_STARTED)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  linkedTechnicalDebtIds String[]

  // Relations
  project Projects @relation(fields: [projectId], references: [id])
}

// ENUMS

enum ActionStatus {
  open
  in_progress
  done
}

enum Priority {
  Low
  Medium
  High
}

enum Status {
  open
  in_review
  closed
}

enum DeprecationStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
